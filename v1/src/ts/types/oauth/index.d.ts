/** Declaration file generated by dts-gen */
/* tslint:disable:variable-name */
declare module "oauth" {
    export class OAuth {
        constructor(
            requestUrl: string,
            accessUrl: string,
            consumerKey: string,
            consumerSecret: string,
            version: string,
            authorize_callback: string,
            signatureMethod: string,
            nonceSize?: any,
            customHeaders?: any);

        public authHeader(
            url: any,
            oauth_token: any,
            oauth_token_secret: any,
            method: any): any;

        public delete(
            url: any,
            oauth_token: any,
            oauth_token_secret: any,
            callback: any): any;

        public get(
            url: any,
            oauth_token: any,
            oauth_token_secret: any,
            callback: any): any;

        public getOAuthAccessToken(
            oauth_token: string,
            oauth_token_secret: string,
            oauth_verifier: string,
            callback: (
                error: any,
                oauth_access_token: string,
                oauth_access_token_secret: string,
                results: any) => void): void;

        public getOAuthRequestToken(
            extraParams: any,
            callback: (
                error: any,
                oauth_token: string,
                oauth_token_secret: string,
                results: any) => void): void;

        public getOAuthRequestToken(
            callback: (
                error: any,
                oauth_token: string,
                oauth_token_secret: string,
                results: any) => void): void;

        public getProtectedResource(
            url: any,
            method: any,
            oauth_token: any,
            oauth_token_secret: any,
            callback: any): void;

        public post(
            url: any,
            oauth_token: any,
            oauth_token_secret: any,
            post_body: any,
            post_content_type: any,
            callback: any): any;

        public put(
            url: any,
            oauth_token: any,
            oauth_token_secret: any,
            post_body: any,
            post_content_type: any,
            callback: any): any;

        public setClientOptions(options: any): void;

        public signUrl(
            url: any,
            oauth_token: any,
            oauth_token_secret: any,
            method: any): any;

    }

    export class OAuth2 {
        constructor(
            clientId: any,
            clientSecret: any,
            baseSite: any,
            authorizePath: any,
            accessTokenPath: any,
            customHeaders: any);

        public buildAuthHeader(token: any): any;

        public get(
            url: any,
            access_token: any,
            callback: any): void;

        public getAuthorizeUrl(params: any): any;

        public getOAuthAccessToken(code: any, params: any, callback: any): void;

        public getProtectedResource(url: any, access_token: any, callback: any): void;

        public setAccessTokenName(name: any): void;

        public setAgent(agent: any): void;

        public setAuthMethod(authMethod: any): void;

        public useAuthorizationHeaderforGET(useIt: any): void;

    }

    export class OAuthEcho {
        constructor(
            realm: any,
            verify_credentials: any,
            consumerKey: any,
            consumerSecret: any,
            version: any,
            signatureMethod: any,
            nonceSize: any,
            customHeaders: any);

        public authHeader(url: any, oauth_token: any, oauth_token_secret: any, method: any): any;

        public delete(url: any, oauth_token: any, oauth_token_secret: any, callback: any): any;

        public get(url: any, oauth_token: any, oauth_token_secret: any, callback: any): any;

        public getOAuthAccessToken(oauth_token: any, oauth_token_secret: any, oauth_verifier: any, callback: any): void;

        public getOAuthRequestToken(extraParams: any, callback: any): void;

        public getProtectedResource(
            url: any,
            method: any,
            oauth_token: any,
            oauth_token_secret: any,
            callback: any): void;

        public post(
            url: any,
            oauth_token: any,
            oauth_token_secret: any,
            post_body: any,
            post_content_type: any,
            callback: any): any;

        public put(
            url: any,
            oauth_token: any,
            oauth_token_secret: any,
            post_body: any,
            post_content_type: any,
            callback: any): any;

        public setClientOptions(options: any): void;

        public signUrl(url: any, oauth_token: any, oauth_token_secret: any, method: any): any;

    }
}
